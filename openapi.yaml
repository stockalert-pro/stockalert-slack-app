openapi: 3.0.3
info:
  title: StockAlert.pro API (v1)
  version: 1.0.0
  contact:
    name: StockAlert.pro Support
    email: support@stockalert.pro
    url: https://stockalert.pro/support
  license:
    name: Proprietary
    url: https://stockalert.pro/terms
  termsOfService: https://stockalert.pro/terms
  description: |
    Unified v1 API for stock alerts and webhooks.

    ## Getting Started

    The StockAlert.pro API allows you to programmatically manage stock price alerts and webhooks.

    ## Authentication

    Two authentication methods are supported:
    - **API Key** (recommended for programmatic access): Include `X-API-Key` header
    - **Bearer Token** (for web applications): Include `Authorization: Bearer <token>` header

    API keys can be created in your account dashboard and support scope-based permissions:
    - `alerts:read` - Read alerts
    - `alerts:write` - Create, update, and delete alerts
    - `webhooks:read` - Read webhooks
    - `webhooks:write` - Create and delete webhooks
    - `stocks:read` - Read stock information

    ## Rate Limiting

    All endpoints are rate limited. Rate limit information is included in:
    - Response headers: `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`
    - Response body: `meta.rateLimit` object

    The `reset` timestamp is Unix epoch time in milliseconds.

    Default limits by tier:
    - Basic: 1000 requests per hour
    - Pro: 5000 requests per hour
    - Enterprise: Custom limits

    ## Response Format

    All responses follow a consistent envelope format:

    **Success Response:**
    ```json
    {
      "success": true,
      "data": { ... },
      "meta": {
        "rateLimit": {
          "limit": 1000,
          "remaining": 999,
          "reset": 1736180400000
        }
      }
    }
    ```

    **Error Response:**
    ```json
    {
      "success": false,
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid query parameters",
        "details": { ... }
      }
    }
    ```

    ## Webhook Signatures

    Generic webhooks (non-Slack) include a signature header for verification:
    - Header: `X-StockAlert-Signature`
    - Algorithm: HMAC-SHA256
    - Format: hex digest

    We also include convenience headers:
    - `X-StockAlert-Event`: Event name (e.g., `alert.triggered`)
    - `X-StockAlert-Timestamp`: ISO 8601 timestamp for the event

    Example verification (Node.js):
    ```javascript
    import crypto from 'crypto'
    const expected = crypto
      .createHmac('sha256', webhookSecret)
      .update(JSON.stringify(payload))
      .digest('hex')
    const header = req.headers['x-stockalert-signature']
    const valid = header && crypto.timingSafeEqual(Buffer.from(header), Buffer.from(expected))
    ```

    Slack webhooks do not include signatures as Slack handles authentication internally.

    ## Support

    - Documentation: https://docs.stockalert.pro
    - Support: support@stockalert.pro
    - Status: https://status.stockalert.pro
externalDocs:
  description: Complete API documentation and guides
  url: https://docs.stockalert.pro/api
tags:
  - name: Alerts
    description: Manage price and technical alerts
  - name: Webhooks
    description: Manage outgoing webhooks for alert events
servers:
  - url: https://stockalert.pro
    description: Production
  - url: http://localhost:3009
    description: Local development
paths:
  /api/v1/alerts:
    get:
      tags: [Alerts]
      operationId: alertsList
      summary: List alerts (v1)
      description: |
        Get a paginated list of alerts with v1 envelope and rate limit meta.
        Required scopes (API key): alerts:read
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/LimitAlertsList'
        - $ref: '#/components/parameters/Status'
        - $ref: '#/components/parameters/ConditionFilter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/SortField'
        - $ref: '#/components/parameters/SortDirection'
        - $ref: '#/components/parameters/Minimal'
        - $ref: '#/components/parameters/Extended'
      responses:
        '200':
          description: Successful response
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertsListEnvelope'
              examples:
                example:
                  summary: Example list response
                  value:
                    success: true
                    data:
                      - id: 'a5d7e3f0-1234-4d8a-9c2b-111111111111'
                        symbol: 'AAPL'
                        condition: 'price_above'
                        threshold: 200
                        notification: 'email'
                        status: 'active'
                        created_at: '2025-01-01T12:00:00.000Z'
                        initial_price: 189.2
                        parameters: null
                    meta:
                      pagination: { page: 1, limit: 50, total: 1, totalPages: 1 }
                      rateLimit: { limit: 100, remaining: 99, reset: 1736180400000 }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
    post:
      tags: [Alerts]
      operationId: alertsCreate
      summary: Create alert (v1)
      description: |
        Create a new alert.
        Required scopes (API key): alerts:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
            examples:
              volumeChangeAlert:
                summary: Volume Change Alert
                value:
                  symbol: AAPL
                  condition: volume_change
                  threshold: 100
                  notification: email
                  parameters:
                    volumeBaseline: ma20
              priceAlert:
                summary: Price Alert Example
                value:
                  symbol: AAPL
                  condition: price_above
                  threshold: 200
                  notification: email
              percentageAlert:
                summary: Percentage Change Alert
                value:
                  symbol: GOOGL
                  condition: price_change_down
                  threshold: 10
                  notification: sms
              technicalAlert:
                summary: Technical Indicator Alert
                value:
                  symbol: MSFT
                  condition: ma_crossover_golden
                  notification: email
              fundamentalAlert:
                summary: Fundamental Alert
                value:
                  symbol: AMZN
                  condition: pe_ratio_below
                  threshold: 25
                  notification: email
              timeBasedAlert:
                summary: Time-based Alert
                value:
                  symbol: TSLA
                  condition: daily_reminder
                  notification: email
              maAlert:
                summary: Moving Average Touch Alert
                value:
                  symbol: NVDA
                  condition: ma_touch_above
                  threshold: 200
                  notification: email
              rsiAlert:
                summary: RSI Alert
                value:
                  symbol: AMD
                  condition: rsi_limit
                  threshold: 70
                  notification: email
                  parameters:
                    direction: above
      responses:
        '201':
          description: Created
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
              examples:
                example:
                  summary: Example create response
                  value:
                    success: true
                    data:
                      id: '2f8d0f7b-2222-4c3a-b1c3-222222222222'
                      symbol: 'AAPL'
                      condition: 'price_above'
                      threshold: 200
                      notification: 'email'
                      status: 'active'
                      created_at: '2025-01-01T12:00:00.000Z'
                      initial_price: 189.2
                      parameters: null
                    meta:
                      rateLimit: { limit: 100, remaining: 99, reset: 1736180400000 }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/alerts/{id}:
    get:
      tags: [Alerts]
      operationId: alertsGet
      summary: Get alert (v1)
      description: |
        Get alert by id.
        Required scopes (API key): alerts:read
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Successful
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
    put:
      tags: [Alerts]
      operationId: alertsUpdate
      summary: Update alert (v1)
      description: |
        Partial update of an alert.
        Required scopes (API key): alerts:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlertRequest'
      responses:
        '200':
          description: Updated
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
    delete:
      tags: [Alerts]
      operationId: alertsDelete
      summary: Delete alert (v1)
      description: |
        Delete an alert.
        Required scopes (API key): alerts:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Deleted
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertDeletedEnvelope'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/alerts/{id}/pause:
    post:
      tags: [Alerts]
      operationId: alertsPause
      summary: Pause alert (v1)
      description: |
        Pause an alert.
        Required scopes (API key): alerts:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Paused
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/alerts/{id}/activate:
    post:
      tags: [Alerts]
      operationId: alertsActivate
      summary: Activate alert (v1)
      description: |
        Reactivate an alert.
        Required scopes (API key): alerts:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Activated
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /api/v1/alerts/{id}/history:
    get:
      tags: [Alerts]
      operationId: alertsHistory
      summary: Alert history (v1)
      description: |
        Get history of an alert.
        Required scopes (API key): alerts:read
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/LimitHistory'
      responses:
        '200':
          description: Successful response
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertHistoryEnvelope'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
  /api/v1/alerts/stats:
    get:
      tags: [Alerts]
      operationId: alertsStats
      summary: Alerts statistics (v1)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Status counts and total
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      statusCounts: { type: object, additionalProperties: { type: integer } }
                      total: { type: integer }
                  meta:
                    type: object
                    properties:
                      rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/alerts/verify:
    post:
      tags: [Alerts]
      operationId: alertsVerify
      summary: Verify alert (v1)
      description: Verify alert via token (guest allowed)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token: { type: string }
      responses:
        '200':
          description: Verified
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/alerts/history:
    post:
      tags: [Alerts]
      operationId: alertsHistoryLog
      summary: Log alert history (v1)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertHistory'
      responses:
        '200':
          description: Logged
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessAlertEnvelope'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/Validation' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/webhooks:
    get:
      tags: [Webhooks]
      operationId: webhooksList
      summary: List webhooks (v1)
      description: |
        Returns your active webhooks with v1 envelope and rate limit meta.
        Required scopes (API key): webhooks:read
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessWebhooksListEnvelope'
              examples:
                example:
                  summary: Example list response
                  value:
                    success: true
                    data:
                      - id: '9f7e4b1c-aaaa-4e5f-bbbb-333333333333'
                        url: 'https://example.com/webhook'
                        events: ['alert.triggered']
                        is_active: true
                        created_at: '2025-01-01T12:00:00.000Z'
                    meta:
                      rateLimit: { limit: 1000, remaining: 999, reset: 1736180400000 }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
    post:
      summary: Create webhook (v1)
      tags: [Webhooks]
      operationId: webhooksCreate
      description: |
        Create a webhook (HTTPS required; up to 5 per user).
        Required scopes (API key): webhooks:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string, format: uri, description: HTTPS webhook URL (required) }
                events:
                  type: array
                  items:
                    type: string
                    enum: [alert.triggered]
                  description: List of event types to subscribe to. Currently only 'alert.triggered' is supported.
                  default: [alert.triggered]
            examples:
              genericWebhook:
                summary: Generic JSON webhook
                value:
                  url: https://example.com/webhook
                  events: [alert.triggered]
              slackWebhook:
                summary: Slack incoming webhook
                value:
                  url: https://hooks.slack.com/services/YOUR_WORKSPACE_ID/YOUR_CHANNEL_ID/YOUR_WEBHOOK_TOKEN
                  events: [alert.triggered]
      responses:
        '201':
          description: Created
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessWebhookEnvelope'
              examples:
                example:
                  summary: Example create response (secret returned once)
                  value:
                    success: true
                    data:
                      id: '7a1b2c3d-4444-4e5f-cccc-444444444444'
                      url: 'https://example.com/webhook'
                      events: ['alert.triggered']
                      secret: 'whsec_abcdef0123456789'
                      is_active: true
                      created_at: '2025-01-01T12:00:00.000Z'
                    meta:
                      rateLimit: { limit: 1000, remaining: 999, reset: 1736180400000 }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403':
          description: Forbidden (missing scope)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/webhooks/{id}:
    get:
      tags: [Webhooks]
      operationId: webhooksGet
      summary: Get webhook (v1)
      description: |
        Get webhook by id.
        Required scopes (API key): webhooks:read
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Found
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessWebhookEnvelope'
              examples:
                example:
                  summary: Example get response
                  value:
                    success: true
                    data:
                      id: '9f7e4b1c-aaaa-4e5f-bbbb-333333333333'
                      url: 'https://example.com/webhook'
                      events: ['alert.triggered']
                      is_active: true
                      created_at: '2025-01-01T12:00:00.000Z'
                    meta:
                      rateLimit: { limit: 1000, remaining: 999, reset: 1736180400000 }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
    delete:
      summary: Delete webhook (v1)
      tags: [Webhooks]
      operationId: webhooksDelete
      description: |
        Soft-deletes the webhook (is_active=false).
        Required scopes (API key): webhooks:write
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Deleted
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessWebhookDeletedEnvelope'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '403':
          description: Forbidden (missing scope)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/v1/webhooks/test:
    post:
      tags: [Webhooks]
      operationId: webhooksTest
      summary: Send test webhook (v1)
      description: |
        Sends a test event to your webhook URL. Slack URLs get a Slack-formatted payload without signature.
        Required scopes (API key): webhooks:write
        Rate limit: 5 requests per minute per API key or user.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url, secret]
              properties:
                url: { type: string, format: uri }
                secret: { type: string }
            examples:
              genericTest:
                summary: Generic JSON destination
                value:
                  url: https://example.com/webhook
                  secret: test-secret
              slackTest:
                summary: Slack destination (no signature header)
                value:
                  url: https://hooks.slack.com/services/YOUR_WORKSPACE_ID/YOUR_CHANNEL_ID/YOUR_WEBHOOK_TOKEN
                  secret: any-value
      responses:
        '200':
          description: Test sent; returns destination response preview
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessWebhookTestEnvelope'
              examples:
                example:
                  summary: Example test response
                  value:
                    success: true
                    data:
                      status: 200
                      statusText: OK
                      response: 'ok'
                    meta:
                      rateLimit: { limit: 5, remaining: 4, reset: 1736180400000 }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MetaPagination:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
    MetaRateLimit:
      type: object
      properties:
        limit: { type: integer, description: Requests allowed in the current window }
        remaining: { type: integer, description: Requests remaining in the current window }
        reset: { type: integer, format: int64, description: Reset time as Unix epoch milliseconds }
    ApiError:
      type: object
      properties:
        code:
          type: string
          description: Machine-readable error code
          enum:
            [
              VALIDATION_ERROR,
              UNAUTHORIZED,
              FORBIDDEN,
              NOT_FOUND,
              RATE_LIMITED,
              INTERNAL_ERROR,
              BAD_REQUEST,
              SERVICE_UNAVAILABLE,
            ]
          example: VALIDATION_ERROR
        message: { type: string, example: Invalid query parameters }
        details: { type: object, nullable: true }
    ApiErrorEnvelope:
      type: object
      properties:
        success: { type: boolean, example: false }
        error: { $ref: '#/components/schemas/ApiError' }
    AlertHistory:
      type: object
      properties:
        alert_id: { type: string, format: uuid }
        user_id: { type: string, format: uuid, nullable: true }
        email: { type: string, nullable: true }
        symbol: { type: string }
        action_type:
          { type: string, enum: [created, updated, paused, reactivated, triggered, deleted] }
        action_timestamp: { type: string, format: date-time }
        previous_status: { $ref: '#/components/schemas/AlertStatus', nullable: true }
        new_status: { $ref: '#/components/schemas/AlertStatus', nullable: true }
        alert_data: { type: object, nullable: true }
        trigger_price: { type: number, nullable: true }
        notification_status: { type: string, nullable: true }
    AlertCondition:
      type: string
      description: Alert condition type
      enum:
        [
          price_above,
          price_below,
          price_change_up,
          price_change_down,
          new_high,
          new_low,
          reminder,
          daily_reminder,
          ma_crossover_golden,
          ma_crossover_death,
          ma_touch_above,
          ma_touch_below,
          volume_change,
          rsi_limit,
          pe_ratio_below,
          pe_ratio_above,
          forward_pe_below,
          forward_pe_above,
          earnings_announcement,
          dividend_ex_date,
          dividend_payment,
        ]
    AlertStatus:
      type: string
      enum: [active, paused, triggered]
    CreateAlertRequest:
      type: object
      required: [symbol, condition]
      properties:
        symbol: { type: string }
        condition: { $ref: '#/components/schemas/AlertCondition' }
        threshold:
          type: number
          nullable: true
          description: |
            Threshold requirements depend on `condition`.
            - Required: `price_above`, `price_below`, `price_change_up`, `price_change_down`, `rsi_limit`, `ma_touch_above`, `ma_touch_below`, `pe_ratio_below`, `pe_ratio_above`, `forward_pe_below`, `forward_pe_above`.
            - Not used: `ma_crossover_golden`, `ma_crossover_death`, `daily_reminder`, `reminder`, `earnings_announcement`, `dividend_ex_date`, `dividend_payment`.
        notification: { type: string, enum: [email, sms], default: email }
        parameters: { type: object, additionalProperties: true }
    Alert:
      type: object
      properties:
        id: { type: string, format: uuid, readOnly: true }
        user_id: { type: string, format: uuid, description: Owner of this alert, readOnly: true }
        email:
          { type: string, nullable: true, description: Email for guest alerts or override email }
        symbol: { type: string }
        condition: { $ref: '#/components/schemas/AlertCondition' }
        threshold: { type: number, nullable: true }
        notification: { type: string, enum: [email, sms] }
        status: { $ref: '#/components/schemas/AlertStatus', readOnly: true }
        created_at: { type: string, format: date-time, readOnly: true }
        triggered_at:
          {
            type: string,
            format: date-time,
            nullable: true,
            description: Timestamp when alert was triggered,
            readOnly: true,
          }
        initial_price: { type: number, readOnly: true }
        parameters: { type: object, nullable: true, additionalProperties: true }
        verified:
          {
            type: boolean,
            description: Whether alert email has been verified (for guest alerts),
            readOnly: true,
          }
        verification_token:
          {
            type: string,
            nullable: true,
            description: Token for email verification (may be returned on create; not accepted in requests),
            readOnly: true,
          }
        last_evaluated_at:
          {
            type: string,
            format: date-time,
            nullable: true,
            description: Last time alert was evaluated against current price,
            readOnly: true,
          }
        last_metric_value:
          {
            type: number,
            nullable: true,
            description: Last metric value used in evaluation,
            readOnly: true,
          }
        stock:
          type: object
          nullable: true
          description: Enriched stock data for this alert (present on GET by id)
          readOnly: true
          properties:
            name: { type: string }
            last_price: { type: number }
            high_52w: { type: number, nullable: true }
            low_52w: { type: number, nullable: true }
            rsi: { type: number, nullable: true }
            ma_50: { type: number, nullable: true }
            ma_200: { type: number, nullable: true }
    UpdateAlertRequest:
      type: object
      description: Partial update of an alert. Provide at least one field.
      properties:
        condition: { $ref: '#/components/schemas/AlertCondition' }
        threshold: { type: number, nullable: true }
        notification: { type: string, enum: [email, sms] }
        parameters: { type: object, nullable: true, additionalProperties: true }
    ApiSuccessAlertEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data: { $ref: '#/components/schemas/Alert' }
        meta:
          type: object
          properties:
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    ApiSuccessAlertsListEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: array
          items: { $ref: '#/components/schemas/Alert' }
        meta:
          type: object
          properties:
            pagination: { $ref: '#/components/schemas/MetaPagination' }
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    ApiSuccessAlertDeletedEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            alertId: { type: string, format: uuid }
            status: { type: string, example: deleted }
        meta:
          type: object
          properties:
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    ApiSuccessAlertHistoryEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: array
          items: { $ref: '#/components/schemas/AlertHistory' }
        meta:
          type: object
          properties:
            pagination: { $ref: '#/components/schemas/MetaPagination' }
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    Webhook:
      type: object
      properties:
        id: { type: string, format: uuid, readOnly: true }
        user_id: { type: string, format: uuid, description: Owner of this webhook, readOnly: true }
        url: { type: string, format: uri }
        events: { type: array, items: { type: string } }
        secret:
          type: string
          writeOnly: true
          description: Returned on create only. Not present in GET responses.
        is_active: { type: boolean }
        created_at: { type: string, format: date-time, readOnly: true }
        last_triggered_at:
          {
            type: string,
            format: date-time,
            nullable: true,
            description: Timestamp of last successful webhook delivery,
            readOnly: true,
          }
        failure_count:
          { type: integer, description: Number of consecutive delivery failures, readOnly: true }
        metadata:
          {
            type: object,
            nullable: true,
            additionalProperties: true,
            description: Optional metadata for webhook,
          }
    ApiSuccessWebhookEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data: { $ref: '#/components/schemas/Webhook' }
        meta:
          type: object
          properties:
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    ApiSuccessWebhooksListEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: array
          items: { $ref: '#/components/schemas/Webhook' }
        meta:
          type: object
          properties:
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    ApiSuccessWebhookDeletedEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            id: { type: string, format: uuid }
        meta:
          type: object
          properties:
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    ApiSuccessWebhookTestEnvelope:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            status: { type: integer, example: 200 }
            statusText: { type: string, example: OK }
            response: { type: string }
        meta:
          type: object
          properties:
            rateLimit: { $ref: '#/components/schemas/MetaRateLimit' }
    WebhookPayload:
      type: object
      description: Payload sent to webhook URLs when alert.triggered event occurs
      properties:
        event: { type: string, enum: [alert.triggered], description: Event type }
        timestamp: { type: string, format: date-time, description: Event timestamp (ISO 8601) }
        data:
          type: object
          description: Alert data that triggered the webhook
          properties:
            alert:
              type: object
              properties:
                id: { type: string, format: uuid }
                symbol: { type: string }
                condition: { $ref: '#/components/schemas/AlertCondition' }
                threshold: { type: number, nullable: true }
                status: { $ref: '#/components/schemas/AlertStatus' }
            stock:
              type: object
              properties:
                symbol: { type: string }
                price: { type: number }
                change: { type: number, nullable: true }
                change_percent: { type: number, nullable: true }
      example:
        event: alert.triggered
        timestamp: '2025-01-01T12:00:00.000Z'
        data:
          alert:
            id: 'a5d7e3f0-1234-4d8a-9c2b-111111111111'
            symbol: 'AAPL'
            condition: 'price_above'
            threshold: 200
            status: 'triggered'
          stock:
            symbol: 'AAPL'
            price: 201.5
            change: 2.3
            change_percent: 1.15
  parameters:
    Page:
      name: page
      in: query
      schema: { type: integer, default: 1, minimum: 1 }
      description: Page number (1-based)
    LimitAlertsList:
      name: limit
      in: query
      schema: { type: integer, default: 50, maximum: 100, minimum: 1 }
      description: Items per page (max 100)
    LimitHistory:
      name: limit
      in: query
      schema: { type: integer, default: 50, maximum: 200, minimum: 1 }
      description: History items per page (max 200)
    Status:
      name: status
      in: query
      schema: { type: string }
    ConditionFilter:
      name: condition
      in: query
      schema: { type: string }
    Search:
      name: search
      in: query
      schema: { type: string }
    SortField:
      name: sortField
      in: query
      schema: { type: string, default: created_at }
    SortDirection:
      name: sortDirection
      in: query
      schema: { type: string, enum: [asc, desc], default: desc }
    Minimal:
      name: minimal
      in: query
      schema: { type: boolean }
      description: If true, reduces returned fields for lightweight responses
    Extended:
      name: extended
      in: query
      schema: { type: boolean }
      description: If true, returns extended fields when available
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: UNAUTHORIZED
                  message: Invalid or missing credentials
    Forbidden:
      description: Forbidden (missing scope)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: FORBIDDEN
                  message: Missing required scope
    Validation:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: VALIDATION_ERROR
                  message: Invalid request parameters
    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: RATE_LIMITED
                  message: Too many requests
    NotFound:
      description: Not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: NOT_FOUND
                  message: Resource not found
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: BAD_REQUEST
                  message: Invalid JSON
    ServiceUnavailable:
      description: Upstream service unavailable
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiErrorEnvelope' }
          examples:
            example:
              value:
                success: false
                error:
                  code: SERVICE_UNAVAILABLE
                  message: Upstream dependency unavailable
  headers:
    X-RateLimit-Limit:
      description: Requests allowed in the current window
      schema: { type: integer }
    X-RateLimit-Remaining:
      description: Requests remaining in the current window
      schema: { type: integer }
    X-RateLimit-Reset:
      description: Reset time as Unix epoch milliseconds
      schema: { type: integer, format: int64 }
