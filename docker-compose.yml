services:
  slack-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: stockalert-slack-app:latest
    container_name: stockalert-slack-app
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database connection (example)
      - DATABASE_URL=${DATABASE_URL}
      # Slack credentials
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      # StockAlert webhook secret
      - STOCKALERT_WEBHOOK_SECRET=${STOCKALERT_WEBHOOK_SECRET}
      - STOCKALERT_API_URL=${STOCKALERT_API_URL}
      - STOCKALERT_API_KEY=${STOCKALERT_API_KEY}
      # App configuration
      - BASE_URL=${BASE_URL}
      # Vercel-specific (optional)
      - VERCEL_ENV=${VERCEL_ENV:-production}
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    # Health check using the built-in Docker health check
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.npm
    networks:
      - app-network
    # Logging configuration
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
        labels: 'service=stockalert-slack-app'

  # Optional: PostgreSQL for local development
  postgres:
    image: postgres:16-alpine
    container_name: stockalert-postgres
    environment:
      - POSTGRES_USER=stockalert
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secretpassword}
      - POSTGRES_DB=stockalert
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U stockalert']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    profiles:
      - development

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
